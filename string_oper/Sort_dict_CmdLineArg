#include <stdio.h>
#include <stdlib.h>    //-> malloc, calloc, realloc
#include <string.h>    //-> strcpy(), strcmp()


int main(int argc, char* argv[])
{
    
    int i,j = 0;
    int MAX_STRING_SIZE = 50;
    char **input = NULL; //Create double pointer to hold 2d matrix
    
    input = (char **) malloc((argc-1) * sizeof(char*));
    for(i = 0; i < argc-1; i++)
    {
        input[i] = (char *) malloc(MAX_STRING_SIZE*sizeof(char));
    /*    
    for (j = 0; j < MAX_STRING_SIZE; j++)
        {
            G[i][j] = 'a';
        }
    */
    }
    
    /*
    for (i = 0; i < numNodes; i++)
        for (j = 0; j < numNodes; j++)
            printf("%s \t\t \n", G);
    */
    
    printf("Taking Input ... \n");
    for (i = 0; i < argc-1; i++)
        strcpy(input[i], argv[i+1]);
    
    for (i = 0; i < argc-1; i++)
        printf("Input Words are - %s \t\t \n", input[i]);
    
    printf("\n\n\nSorting the Input Words\n\n ... \n");
    char *temp = NULL;
    temp = (char*) malloc(sizeof(MAX_STRING_SIZE));
    
	for(i=0; i<(argc-2);++i)
       for(j=i+1;j<(argc-1) ;++j){
          if(strcmp(input[i],input[j])>0)
          {
            strcpy(temp,input[i]);
            strcpy(input[i],input[j]);
            strcpy(input[j],temp);
          }
    }

    for (i = 0; i< argc-1; i++){
	    printf("Sorted Input Dictionary - %s \n", input[i]);
	}


    // Freeing allocated memory ..     
    for(i = 0; i < argc-1; i++)
    {
        free(input[i]);
    }
    free(input);
    free(temp);
   
    return 0;
}
